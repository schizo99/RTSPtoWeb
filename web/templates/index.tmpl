<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
</head>

<body>
  <div class="card" style="position: sticky; top: 20px;">
    <div class="card-body p-0">
      <video id="videoPlayer" height="450" autoplay controls muted playsinline></video>
      <canvas id="canvas" class="d-none"></canvas>
    </div>
    <input type="hidden" id="uuid" value="kittens" />
    <input type="hidden" id="channel" value="0" />
  </div>
</body>

</html>
<script>
  $(document).ready(() => {
    startPlay();
  });

  let mseQueue = [],
    mseSourceBuffer, mseStreamingStarted = false;
  function makePic(video_element, uuid, chan) {
    if (typeof (video_element) === "undefined") {
      video_element = $("#videoPlayer")[0];
    }
    ratio = video_element.videoWidth / video_element.videoHeight;
    w = 400;
    h = parseInt(w / ratio, 10);
    $('#canvas')[0].width = w;
    $('#canvas')[0].height = h;
    $('#canvas')[0].getContext('2d').fillRect(0, 0, w, h);
    $('#canvas')[0].getContext('2d').drawImage(video_element, 0, 0, w, h);
    var imageData = $('#canvas')[0].toDataURL();
    var images = localStorage.getItem('imagesNew');
    if (images != null) {
      images = JSON.parse(images);
    } else {
      images = {};
    }
    var uid = $('#uuid').val();
    if (!!uuid) {
      uid = uuid;
    }

    var channel = $('#channel').val() || chan || 0;
    if (typeof (images[uid]) === "undefined") {
      images[uid] = {};
    }
    images[uid][channel] = imageData;
    localStorage.setItem('imagesNew', JSON.stringify(images));
    $('#' + uid).find('.stream-img[channel="' + channel + '"]').attr('src', imageData);
  }
  function startPlay() {
    let uuid = $('#uuid').val();
    let channel = $('#channel').val();
    location.protocol == 'https:' ? potocol = 'wss' : potocol = 'ws';
    let url = potocol + '://' + location.host + '/stream/' + uuid + '/channel/' + channel + '/mse?uuid=' + uuid + '&channel=' + channel;
    let mse = new MediaSource();
    $("#videoPlayer")[0].src = window.URL.createObjectURL(mse);
    mse.addEventListener('sourceopen', function () {
      let ws = new WebSocket(url);
      ws.binaryType = "arraybuffer";
      ws.onopen = function (event) {
        console.log('Connect to ws');
      }
      ws.onmessage = function (event) {
        let data = new Uint8Array(event.data);
        if (data[0] == 9) {
          decoded_arr = data.slice(1);
          if (window.TextDecoder) {
            mimeCodec = new TextDecoder("utf-8").decode(decoded_arr);
          } else {
            mimeCodec = Utf8ArrayToStr(decoded_arr);
          }
          mseSourceBuffer = mse.addSourceBuffer('video/mp4; codecs="' + mimeCodec + '"');
          mseSourceBuffer.mode = "segments"
          mseSourceBuffer.addEventListener("updateend", pushPacket);

        } else {
          readPacket(event.data);
        }
      };
    }, false);

  }
  function browserDetector() {
    var Browser;
    var ua = self.navigator.userAgent.toLowerCase();
    var match =
      /(edge)\/([\w.]+)/.exec(ua) ||
      /(opr)[\/]([\w.]+)/.exec(ua) ||
      /(chrome)[ \/]([\w.]+)/.exec(ua) ||
      /(iemobile)[\/]([\w.]+)/.exec(ua) ||
      /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
      /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(
        ua
      ) ||
      /(webkit)[ \/]([\w.]+)/.exec(ua) ||
      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
      /(msie) ([\w.]+)/.exec(ua) ||
      (ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua)) ||
      (ua.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(ua)) || [];
    var platform_match =
      /(ipad)/.exec(ua) ||
      /(ipod)/.exec(ua) ||
      /(windows phone)/.exec(ua) ||
      /(iphone)/.exec(ua) ||
      /(kindle)/.exec(ua) ||
      /(android)/.exec(ua) ||
      /(windows)/.exec(ua) ||
      /(mac)/.exec(ua) ||
      /(linux)/.exec(ua) ||
      /(cros)/.exec(ua) || [];
    var matched = {
      browser: match[5] || match[3] || match[1] || "",
      version: match[2] || match[4] || "0",
      majorVersion: match[4] || match[2] || "0",
      platform: platform_match[0] || ""
    };
    var browser = {};

    if (matched.browser) {
      browser[matched.browser] = true;
      var versionArray = matched.majorVersion.split(".");
      browser.version = {
        major: parseInt(matched.majorVersion, 10),
        string: matched.version
      };

      if (versionArray.length > 1) {
        browser.version.minor = parseInt(versionArray[1], 10);
      }

      if (versionArray.length > 2) {
        browser.version.build = parseInt(versionArray[2], 10);
      }
    }

    if (matched.platform) {
      browser[matched.platform] = true;
    }

    if (browser.chrome || browser.opr || browser.safari) {
      browser.webkit = true;
    } // MSIE. IE11 has 'rv' identifer

    if (browser.rv || browser.iemobile) {
      if (browser.rv) {
        delete browser.rv;
      }

      var msie = "msie";
      matched.browser = msie;
      browser[msie] = true;
    } // Microsoft Edge

    if (browser.edge) {
      delete browser.edge;
      var msedge = "msedge";
      matched.browser = msedge;
      browser[msedge] = true;
    } // Opera 15+

    if (browser.opr) {
      var opera = "opera";
      matched.browser = opera;
      browser[opera] = true;
    } // Stock android browsers are marked as Safari

    if (browser.safari && browser.android) {
      var android = "android";
      matched.browser = android;
      browser[android] = true;
    }

    browser.name = matched.browser;
    browser.platform = matched.platform;


    return browser;
  }
  function pushPacket() {
    if (!mseSourceBuffer.updating) {
      if (mseQueue.length > 0) {
        packet = mseQueue.shift();
        mseSourceBuffer.appendBuffer(packet);
      } else {
        mseStreamingStarted = false;
      }
    }
    if ($("#videoPlayer")[0].buffered.length > 0) {
      if (typeof document.hidden !== "undefined" && document.hidden) {

        $("#videoPlayer")[0].currentTime = $("#videoPlayer")[0].buffered.end(($("#videoPlayer")[0].buffered.length - 1)) - 0.5;
      }
    }
  }

  function readPacket(packet) {
    if (!mseStreamingStarted) {
      mseSourceBuffer.appendBuffer(packet);
      mseStreamingStarted = true;
      return;
    }
    mseQueue.push(packet);
    if (!mseSourceBuffer.updating) {
      pushPacket();
    }
  }

  $("#videoPlayer")[0].addEventListener('loadeddata', () => {
    $("#videoPlayer")[0].play();
    let browser = browserDetector();
    if (!browser.safari) {
      makePic();
    }
  });



  $("#videoPlayer")[0].addEventListener('pause', () => {
    if ($("#videoPlayer")[0].currentTime > $("#videoPlayer")[0].buffered.end(($("#videoPlayer")[0].buffered.length - 1))) {
      $("#videoPlayer")[0].currentTime = $("#videoPlayer")[0].buffered.end(($("#videoPlayer")[0].buffered.length - 1)) - 0.1;
      $("#videoPlayer")[0].play();
    }
  });

  $("#videoPlayer")[0].addEventListener('error', () => {
    console.log('video_error')
  });
</script>
